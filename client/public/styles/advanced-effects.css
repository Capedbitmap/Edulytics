/* Advanced interactive animations and effects */

/* === Custom cursor styles === */
/* .custom-cursor rules removed as JS cursor is disabled */

.cursor-inner {
    position: fixed;
    width: 8px;
    height: 8px;
    background-color: var(--primary-color);
    border-radius: 50%;
    pointer-events: none;
    z-index: 10000;
    transition: width 0.2s, height 0.2s, background-color 0.2s;
    transform: translate(-50%, -50%);
    mix-blend-mode: difference;
}

.cursor-outer {
    position: fixed;
    width: 40px;
    height: 40px;
    border: 1px solid rgba(var(--primary-rgb), 0.3);
    border-radius: 50%;
    pointer-events: none;
    z-index: 9999;
    transition: width 0.4s, height 0.4s, border 0.4s, transform 0.1s;
    transform: translate(-50%, -50%);
    opacity: 0.8;
}

.cursor-follower {
    position: fixed;
    width: 80px;
    height: 80px;
    background: radial-gradient(circle, rgba(var(--primary-rgb), 0.2) 0%, rgba(var(--primary-rgb), 0) 70%);
    border-radius: 50%;
    pointer-events: none;
    z-index: 9998;
    opacity: 0.5;
    transform: translate(-50%, -50%) scale(1);
    transition: transform 0.3s ease-out, opacity 0.3s ease-out, background 0.3s ease-out;
}

/* Hover states */
.cursor-inner.cursor-hover {
    width: 12px;
    height: 12px;
    background-color: white;
    mix-blend-mode: difference;
}

.cursor-outer.cursor-hover {
    width: 30px;
    height: 30px;
    border-color: var(--primary-color);
    -webkit-backdrop-filter: invert(1);
    backdrop-filter: invert(1);
}

.cursor-follower.cursor-hover {
    transform: translate(-50%, -50%) scale(1.5);
    background: radial-gradient(circle, rgba(var(--primary-rgb), 0.3) 0%, rgba(var(--primary-rgb), 0) 70%);
}

/* === Floating Particles === */
.particles-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
    pointer-events: none;
}

.particle {
    position: absolute;
    background: linear-gradient(135deg, rgba(var(--primary-rgb), 0.2) 0%, rgba(var(--primary-rgb), 0) 70%);
    border-radius: 50%;
    animation: float 30s infinite linear;
    pointer-events: none;
}

@keyframes float {
    0% {
        transform: translate(0, 0) rotate(0deg) scale(1);
    }
    25% {
        transform: translate(20px, 30px) rotate(90deg) scale(1.1);
    }
    50% {
        transform: translate(-20px, 50px) rotate(180deg) scale(0.9);
    }
    75% {
        transform: translate(-40px, 20px) rotate(270deg) scale(1.2);
    }
    100% {
        transform: translate(0, 0) rotate(360deg) scale(1);
    }
}

/* Create more complex particles */
.particle:nth-child(2n) {
    background: linear-gradient(135deg, rgba(var(--secondary-rgb, 90, 170, 149), 0.15) 0%, transparent 70%);
    animation-direction: reverse;
}

.particle:nth-child(3n) {
    background: linear-gradient(135deg, rgba(var(--accent-rgb, 247, 184, 1), 0.1) 0%, transparent 70%);
    animation-duration: 25s;
}

.particle:nth-child(5n) {
    -webkit-backdrop-filter: blur(2px);
    backdrop-filter: blur(2px);
    background: transparent;
    border: 1px solid rgba(var(--primary-rgb), 0.1);
}

/* === Enhanced Button Effects === */
.btn {
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1), 
                box-shadow 0.3s ease, 
                background-color 0.3s ease,
                color 0.3s ease;
    overflow: hidden;
    position: relative; /* Ensure this is set for position:absolute child */
    z-index: 1; /* Ensure button content stays above pseudo-elements */
}

.btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.2),
        transparent
    );
    transition: left 0.7s ease;
    z-index: 1;
}

.btn:hover::before {
    left: 100%;
}

.btn-primary {
    box-shadow: 0 10px 20px -10px rgba(var(--primary-rgb), 0.5);
}

.btn-primary:hover {
    box-shadow: 0 15px 25px -10px rgba(var(--primary-rgb), 0.7);
    transform: translateY(-5px) scale(1.03);
}

.btn-secondary {
    position: relative;
    z-index: 1;
}

.btn-secondary::after {
    content: '';
    position: absolute;
    inset: 0;
    background-color: var(--secondary-color);
    z-index: -1;
    opacity: 0;
    transition: opacity 0.3s ease;
    border-radius: 4px;
}

.btn-secondary:hover::after {
    opacity: 0.15;
}

/* === Enhanced Feature Cards === */
.feature-card {
    transform-style: preserve-3d;
    perspective: 1000px;
    transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1),
                box-shadow 0.5s cubic-bezier(0.23, 1, 0.32, 1);
}

.feature-card .feature-icon {
    transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1);
}

.feature-card:hover .feature-icon {
    transform: translateZ(30px) scale(1.1);
}

.feature-card:hover h3 {
    transform: translateZ(20px);
}

.feature-card:hover p {
    transform: translateZ(10px);
}

.feature-card:hover {
    transform: translateY(-10px) rotateX(5deg) rotateY(5deg);
    box-shadow: 
        -10px 10px 32px rgba(0, 0, 0, 0.1),
        0 0 0 1px rgba(var(--primary-rgb), 0.05);
}

/* === Typography Effects === */
.hero h1 {
    position: relative;
    perspective: 1000px;
}

.hero h1 .word {
    display: inline-block;
    transform-style: preserve-3d;
}

.hero h1 .word.special {
    position: relative;
}

.hero h1 .word.special::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 100%;
    height: 3px;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 1s cubic-bezier(0.19, 1, 0.22, 1) 1s;
    animation: gradientShift 3s linear infinite;
}

.hero h1:hover .word.special::after {
    transform: scaleX(1);
}

/* Media queries for mobile */
@media (max-width: 768px) {
    .cursor-inner, .cursor-outer, .cursor-follower {
        display: none;
    }
    
    .btn:hover {
        transform: translateY(-3px);
    }
    
    .feature-card:hover {
        transform: translateY(-5px);
    }
}

/* Define RGB variables for additional colors */
:root {
    --secondary-rgb: 90, 170, 149;
    --accent-rgb: 247, 184, 1;
}
